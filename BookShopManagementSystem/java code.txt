import java.util.*;

// Encapsulation: Keeping fields private and using public methods to access and modify them
class Book {
    private int id;
    private String title;
    private String author;
    private double price;
    private int quantity;

    Book(int id, String title, String author, double price, int quantity) {
        this.id = id;
        this.title = title;
        this.author = author;
        this.price = price;
        this.quantity = quantity;
    }

    public int getId() {
        return id;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public double getPrice() {
        return price;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Title: " + title + ", Author: " + author + ", Price: " + price + ", Quantity: " + quantity;
    }
}

// Abstraction: Providing a simplified interface for managing books
class BookShop {
    private List<Book> inventory = new ArrayList<>();
    private double dailySales = 0;

    public void addBook(Book book) {
        inventory.add(book);
        System.out.println("Book added successfully.");
    }

    public void removeBook(int id) {
        inventory.removeIf(book -> book.getId() == id);
        System.out.println("Book removed successfully.");
    }

    public void updateBook(int id, String title, String author, double price, int quantity) {
        for (Book book : inventory) {
            if (book.getId() == id) {
                book.setTitle(title);
                book.setAuthor(author);
                book.setPrice(price);
                book.setQuantity(quantity);
                System.out.println("Book updated successfully.");
                return;
            }
        }
        System.out.println("Book not found.");
    }

    public void viewBooks() {
        if (inventory.isEmpty()) {
            System.out.println("No books available.");
        } else {
            for (Book book : inventory) {
                System.out.println(book);
            }
        }
    }

    public void searchBook(String title) {
        for (Book book : inventory) {
            if (book.getTitle().equalsIgnoreCase(title)) {
                System.out.println(book);
                return;
            }
        }
        System.out.println("Book not found.");
    }

    public void updateDailySales(double amount) {
        dailySales += amount;
        System.out.println("Daily sales updated successfully. Current sales: " + dailySales);
    }

    public void viewDailySales() {
        System.out.println("Total daily sales: " + dailySales);
    }

    public void generateStockReport() {
        System.out.println("Stock Report:");
        for (Book book : inventory) {
            System.out.println(book);
        }
    }
}

// Inheritance: BookShopManagement uses BookShop as a dependency
public class BookShopManagement {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        BookShop shop = new BookShop();

        while (true) {
            System.out.println("\nBook Shop Management System");
            System.out.println("1. Add Book");
            System.out.println("2. View Books");
            System.out.println("3. Update Book");
            System.out.println("4. Remove Book");
            System.out.println("5. Search Book");
            System.out.println("6. Update Daily Sales");
            System.out.println("7. View Daily Sales");
            System.out.println("8. Generate Stock Report");
            System.out.println("9. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter ID: ");
                    int id = scanner.nextInt();
                    scanner.nextLine(); // consume newline
                    System.out.print("Enter Title: ");
                    String title = scanner.nextLine();
                    System.out.print("Enter Author: ");
                    String author = scanner.nextLine();
                    System.out.print("Enter Price: ");
                    double price = scanner.nextDouble();
                    System.out.print("Enter Quantity: ");
                    int quantity = scanner.nextInt();
                    shop.addBook(new Book(id, title, author, price, quantity));
                    break;
                case 2:
                    shop.viewBooks();
                    break;
                case 3:
                    System.out.print("Enter ID to update: ");
                    int updateId = scanner.nextInt();
                    scanner.nextLine(); // consume newline
                    System.out.print("Enter New Title: ");
                    String newTitle = scanner.nextLine();
                    System.out.print("Enter New Author: ");
                    String newAuthor = scanner.nextLine();
                    System.out.print("Enter New Price: ");
                    double newPrice = scanner.nextDouble();
                    System.out.print("Enter New Quantity: ");
                    int newQuantity = scanner.nextInt();
                    shop.updateBook(updateId, newTitle, newAuthor, newPrice, newQuantity);
                    break;
                case 4:
                    System.out.print("Enter ID to remove: ");
                    int removeId = scanner.nextInt();
                    shop.removeBook(removeId);
                    break;
                case 5:
                    System.out.print("Enter title to search: ");
                    scanner.nextLine(); // consume newline
                    String searchTitle = scanner.nextLine();
                    shop.searchBook(searchTitle);
                    break;
                case 6:
                    System.out.print("Enter sales amount to update: ");
                    double sales = scanner.nextDouble();
                    shop.updateDailySales(sales);
                    break;
                case 7:
                    shop.viewDailySales();
                    break;
                case 8:
                    shop.generateStockReport();
                    break;
                case 9:
                    System.out.println("Exiting... Goodbye!");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
    }
}

